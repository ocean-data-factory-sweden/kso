name: build-container
on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.paths-docker-changed.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Detect if paths-ignore changed
        id: paths-docker-changed
        uses: tj-actions/changed-files@v37
        with:
          files: |
            Dockerfile
            kso_utils/requirements
            yolov5_tracker/requirements
            yolov5/requirements
            
  # Based on if the files have changed and whether we push or PR, 
  # we decide on the tag of the image.
  check-image:
    runs-on: ubuntu-latest
    needs: [changed-files]
    outputs:
      tag: ${{ steps.find-image-tag.outputs.tag }}
    steps:
      - name: find-image-tag
        id: find-image-tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ needs.changed-files.outputs.changed }}" = "false" ] ; then
            echo "tag=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "pull_request" ] ; then
            echo "tag=${{ github.head_ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
        
       
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [changed-files, check-image]
    # We always want to update image master on a push, so that the code in the container on SNIC is up to date
    if: needs.changed-files.outputs.changed == 'true' || "${{ github.ref_name }}" = "master" 
    permissions:
      contents: read
      packages: write
    steps:
      - name: Free disk space (specific to Ubuntu images)
        run: |
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ secrets.GITHUB_TOKEN }}'
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.check-image.outputs.tag }}
            ghcr.io/${{ github.repository }}:latest

  # Get the gitlab runner id to be able to checkout the repository.
  # Otherwise you do not have permission.
  configure:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"

  test-notebooks-and-widgets:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build-and-push-image, configure, check-image]
    container:
      image: ghcr.io/${{ github.repository }}:${{ needs.check-image.outputs.tag }}
      options: --user ${{ needs.configure.outputs.uid_gid }}
      credentials:
        username: '${{ github.actor }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install pytest
        run: pip install pytest
      - name: Login W&B
        shell: bash
        env:
          WANDB_API: ${{ secrets.WANDB_KEY }}
        run: wandb login "$WANDB_API"
      - name: Run notebook and widget tests
        id: tests
        run: >-
          export "WANDB_DIR=$(mktemp -d)" && export WANDB_CACHE_DIR="$WANDB_DIR" &&
          cp src/multi_tracker_zoo.py yolov5_tracker/trackers/multi_tracker_zoo.py &&
          python3 -m pytest --disable-warnings test/widget-tests.py &&
          python3 -m pytest --disable-warnings --zoo_user=${{ secrets.ZOO_USERNAME }} --zoo_pass=${{ secrets.ZOO_TOKEN }} test/notebook-tests.py
